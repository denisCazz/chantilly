
<header class="header">
	<div class="header-container">
		<nav class="nav">
			<a href="/" class="logo">
				<span class="logo-text">Bar Tabacchi Chantilly</span>
			</a>
			
			<ul class="nav-menu" id="nav-menu">
				<li><a href="/#home" class="nav-link">Home</a></li>
				<li><a href="/menu/" class="nav-link">Menu</a></li>
				<li><a href="/#servizi" class="nav-link">Servizi</a></li>
				<li><a href="/#orari" class="nav-link">Orari</a></li>
				<li><a href="/#contatti" class="nav-link">Contatti</a></li>
			</ul>
			
			<div class="nav-controls">
				<button class="mobile-toggle" id="mobile-toggle" aria-label="Menu">
					<span class="hamburger"></span>
				</button>
			</div>
		</nav>
	</div>
</header>

<script>
	// Utilizziamo la delegazione degli eventi per assicurarci che funzioni
	document.addEventListener('click', function(e) {
		// Mobile menu toggle
		if (e.target.closest('#mobile-toggle')) {
			e.preventDefault();
			e.stopPropagation();
			
			const mobileToggle = document.getElementById('mobile-toggle');
			const navMenu = document.getElementById('nav-menu');
			
			if (mobileToggle && navMenu) {
				mobileToggle.classList.toggle('active');
				navMenu.classList.toggle('active');
			}
		}
		
		// Close mobile menu when clicking on navigation links
		if (e.target.closest('.nav-link')) {
			const mobileToggle = document.getElementById('mobile-toggle');
			const navMenu = document.getElementById('nav-menu');
			
			if (mobileToggle && navMenu) {
				mobileToggle.classList.remove('active');
				navMenu.classList.remove('active');
			}
		}
	});

	document.addEventListener('DOMContentLoaded', function() {
		const navLinks = Array.from(document.querySelectorAll('.nav-link'));
		if (!navLinks.length) return;

		const header = document.querySelector('.header');
		const navMenu = document.getElementById('nav-menu');
		const mobileToggle = document.getElementById('mobile-toggle');
		const currentPath = window.location.pathname;
		const isHomePage = currentPath === '/' || currentPath === '/index.html';

		const setActiveLink = (predicate) => {
			navLinks.forEach((link) => {
				const shouldActivate = predicate(link);
				link.classList.toggle('active', Boolean(shouldActivate));
			});
		};

		const setActiveByHref = (href) => setActiveLink((link) => link.getAttribute('href') === href);
		const setActiveBySection = (sectionId) => setActiveLink((link) => link.dataset.sectionId === sectionId);

		if (currentPath.startsWith('/menu')) {
			setActiveByHref('/menu/');
		}

		const anchorLinks = navLinks.filter((link) => {
			const href = link.getAttribute('href');
			return href && href.startsWith('/#');
		});

		const sectionsById = new Map();
		const sectionElements = anchorLinks
			.map((link) => {
				const href = link.getAttribute('href');
				if (!href) return null;
				const sectionId = href.slice(2);
				link.dataset.sectionId = sectionId;
				const element = document.getElementById(sectionId);
				if (element) {
					sectionsById.set(sectionId, element);
				}
				return element;
			})
			.filter(Boolean);

		const enableScrollTracking = isHomePage && sectionElements.length > 0;

		const getHeaderOffset = () => {
			const height = header?.offsetHeight ?? 70;
			return height + 8;
		};

		const highlightByScrollPosition = () => {
			if (!sectionElements.length) return;
			const offset = getHeaderOffset();
			const scrollPosition = window.scrollY + offset;
			let activeId = sectionElements[0].id;
			for (const section of sectionElements) {
				if (section.offsetTop <= scrollPosition) {
					activeId = section.id;
				} else {
					break;
				}
			}
			setActiveBySection(activeId);
		};

		if (!enableScrollTracking && !currentPath.startsWith('/menu')) {
			setActiveBySection('home');
		}

		const visibleSections = new Map();
		let scrollRaf = null;

		const updateFromVisibleSections = () => {
			if (visibleSections.size) {
				const sorted = Array.from(visibleSections.values()).sort((a, b) => a.docTop - b.docTop);
				setActiveBySection(sorted[0]?.id ?? 'home');
			} else {
				highlightByScrollPosition();
			}
		};

		if (enableScrollTracking) {
			highlightByScrollPosition();

			const observer = new IntersectionObserver((entries) => {
				entries.forEach((entry) => {
					const sectionId = entry.target.id;
					if (!sectionId) return;
					if (entry.isIntersecting) {
						visibleSections.set(sectionId, {
							id: sectionId,
							docTop: entry.target.getBoundingClientRect().top + window.scrollY
						});
					} else {
						visibleSections.delete(sectionId);
					}
				});
				updateFromVisibleSections();
			}, {
				rootMargin: '-45% 0px -45% 0px',
				threshold: [0.2, 0.4, 0.6]
			});

			sectionElements.forEach((section) => observer.observe(section));

			const scheduleFallbackUpdate = () => {
				if (visibleSections.size) return;
				if (scrollRaf !== null) return;
				scrollRaf = requestAnimationFrame(() => {
					scrollRaf = null;
					highlightByScrollPosition();
				});
			};

			window.addEventListener('scroll', scheduleFallbackUpdate, { passive: true });
			window.addEventListener('resize', () => {
				visibleSections.clear();
				highlightByScrollPosition();
			});

			const applyHash = (hash) => {
				const sectionId = hash.replace('#', '');
				if (!sectionId) {
					highlightByScrollPosition();
					return;
				}
				if (sectionsById.has(sectionId)) {
					setActiveBySection(sectionId);
				}
			};

			applyHash(window.location.hash);

			window.addEventListener('hashchange', () => {
				applyHash(window.location.hash);
			});
		}

		anchorLinks.forEach((link) => {
			link.addEventListener('click', (event) => {
				const href = link.getAttribute('href');
				if (!href) return;
				const sectionId = link.dataset.sectionId;
				if (!sectionId) return;

				const currentlyHomePage = window.location.pathname === '/' || window.location.pathname === '/index.html';
				if (!currentlyHomePage) {
					window.location.href = href;
					return;
				}

				const targetSection = sectionsById.get(sectionId);
				if (!targetSection) return;

				event.preventDefault();
				const targetPosition = targetSection.getBoundingClientRect().top + window.scrollY - getHeaderOffset();
				setActiveBySection(sectionId);
				window.scrollTo({
					top: targetPosition,
					behavior: 'smooth'
				});

				if (mobileToggle && navMenu) {
					mobileToggle.classList.remove('active');
					navMenu.classList.remove('active');
				}
			});
		});
	});
</script>